// Archivo parser.cup

package Analizadores;

// IMPORTACIONES
import java_cup.runtime.Symbol;
import figuras.*;
import excepciones.Errores;
import java.awt.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;


// PARSER
parser code
{:
    private Formas formas;
    scanner s;
    public List<Operacion> operacion = new ArrayList<>();
    public LinkedList<Errores> errores = new LinkedList<>();

    public parser(scanner s, Formas formas) {
        this.s = s;
        this.formas = formas;
    }
    
    @Override
    public void syntax_error(Symbol s) {
        if (errores.stream().noneMatch(e -> e.getLexema().equals(s.value) && e.getLinea() == s.left && e.getColumna() == s.right)) {
            errores.add(new Errores((String) s.value, s.left, s.right, "Sint치ctico", "Error sint치ctico no esperado."));
            System.out.println("Error Sintactico en la linea " + (s.left) + " y columna " + (s.right) + ". No se esperaba el componente: " + (s.value) + ".");
        }
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) {
        if (errores.stream().noneMatch(e -> e.getLexema().equals(s.value) && e.getLinea() == s.left && e.getColumna() == s.right)) {
            errores.add(new Errores((String) s.value, s.left, s.right, "Sint치ctico", "Error sint치ctico no recuperable."));
            System.out.println("Error Sintactico no recuperable en la linea " + (s.left) + " y columna " + (s.right) + ". No se esperaba el componente: " + (s.value) + ".");
        }
    }

    public LinkedList<Errores> getErrores() {
        return errores;
    }

    public void setFormas(Formas formas){
        this.formas = formas;
    }
    public Formas getFormas(){
        return this.formas;
    }
    public java_cup.runtime.Scanner getScanner(){
        return s;
    }

    public List<Operacion> getOperacion(){
        return operacion;
    }
    public void registrarOperacion(String operador, int linea, int columna, String expresion) {
        operacion.add(new Operacion(operador, linea, columna, expresion));
    }
:}

action code
{:
:}

// TERMINALES
terminal GRAFICAR, SIDE, CURVA, ANIMAR, OBJETO, ANTERIOR;
terminal CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO;
terminal PAR1, PAR2, COMA, SUMA, RESTA, MULTI, DIVISION;
terminal String ID;
terminal Integer NUM;
terminal Double DECIMAL;
terminal String COLOR;

// NO TERMINALES
nonterminal Integer OPE;
nonterminal INICIO, INSTRUCCION, INSTRUCCIONES;
nonterminal SHAPE, ANIME;
nonterminal TIPOANIMACION;
nonterminal CIRCLE, RECTANGLE, SQUARE, LINE, POLYGON;

precedence left SUMA, RESTA;
precedence left MULTI, DIVISION;


// PRODUCCIONES Y GRAMATICAS
start with INICIO;

INICIO ::= INSTRUCCIONES;

INSTRUCCIONES ::= INSTRUCCION
                | INSTRUCCIONES INSTRUCCION;

INSTRUCCION ::= SHAPE
            | ANIME;

SHAPE ::= CIRCLE
         | RECTANGLE
         | SQUARE
         | LINE
         | POLYGON;

CIRCLE ::= GRAFICAR CIRCULO PAR1 ID:a COMA OPE:b COMA OPE:c COMA OPE:d COMA COLOR:e PAR2
                    {:
                        String id = a;
                        int num1 = b;
                        int num2 = c;
                        int num3 = d;
                        String colstr = e;

                        Color color = formas.obtenerColor(colstr);

                        Circulo circulo = new Circulo(id, num1, num2, num3, color);
                        formas.crearCirculo(circulo);
                        System.out.println("Circulo creado: " + id + ", " + num1 + ", " + num2 + ", " + num3 + ", " + colstr);

                    :};

SQUARE ::= GRAFICAR CUADRADO PAR1 ID:a COMA OPE:b COMA OPE:c COMA OPE:d COMA COLOR:e PAR2
                    {:
                        String id = a;
                        int num1 = b;
                        int num2 = c;
                        int num3 = d;
                        String colstr = e;

                        Color color = formas.obtenerColor(colstr);

                        Cuadrado cuadrado = new Cuadrado(id, num1, num2, num3, color);
                        formas.crearCuadrado(cuadrado);
                        System.out.println("Cuadrado creado: " + id + ", " + num1 + ", " + num2 + ", " + num3 + ", " + colstr);

                    :};

RECTANGLE ::= GRAFICAR RECTANGULO PAR1 ID:a COMA OPE:b COMA OPE:c COMA OPE:d COMA OPE:e COMA COLOR:f PAR2
                    {:
                        String id = a;
                        int num1 = b;
                        int num2 = c;
                        int num3 = d;
                        int num4 = e;
                        String colstr = f;

                        Color color = formas.obtenerColor(colstr);

                        Rectangulo rectangulo = new Rectangulo(id, num1, num2, num3, num4, color);
                        formas.crearRectangulo(rectangulo);
                        System.out.println("Rectangulo creado: " + id + ", " + num1 + ", " + num2 + ", " + num3 + ", " + num4 + ", " + colstr); 
                    :};

LINE ::= GRAFICAR LINEA PAR1 ID:a COMA OPE:b COMA OPE:c COMA OPE:d COMA OPE:e COMA COLOR:f PAR2
                    {:
                        String id = a;
                        int num1 = b;
                        int num2 = c;
                        int num3 = d;
                        int num4 = e;
                        String colstr = f;

                        Color color = formas.obtenerColor(colstr);

                        Linea linea = new Linea(id, num1, num2, num3, num4, color);
                        formas.crearLinea(linea);
                        System.out.println("Linea creada: " + id + ", " + num1 + ", " + num2 + ", " + num3 + ", " + num4 + ", " + colstr); 
                    :};
    
POLYGON ::= GRAFICAR POLIGONO PAR1 ID:a COMA OPE:b COMA OPE:c COMA OPE:d COMA OPE:e COMA OPE:f COMA COLOR:g PAR2
                    {:
                        String id = a;
                        int num1 = b;
                        int num2 = c;
                        int num3 = d;
                        int num4 = e;
                        int num5 = f;
                        String colstr = g;

                        Color color = formas.obtenerColor(colstr);

                        formas.crearPoligono(id, num1, num2, num3, num4, num5, color);
                        System.out.println("Poligono creado: " + id + ", " + num1 + ", " + num2 + ", " + num3 + ", " + num4 + ", " + num5 + ", " + colstr); 
                    :};

ANIME ::= ANIMAR OBJETO ANTERIOR PAR1 TIPOANIMACION COMA OPE:b COMA OPE:c COMA OPE:d PAR2
                    {: System.out.println("ANIMAR: "); :};

TIPOANIMACION ::= CURVA 
                | SIDE ;

// OPERACIONES MATEMATICAS
OPE ::= OPE:a SUMA OPE:b     {: String expresion = a + " + " + b; RESULT = (int)(a + b); registrarOperacion("Suma", aleft, aright, expresion); :}
      | OPE:a RESTA OPE:b    {: String expresion = a + " - " + b; RESULT = (int)(a - b); registrarOperacion("Resta", aleft, aright, expresion); :}
      | OPE:a MULTI OPE:b    {: String expresion = a + " * " + b; RESULT = (int)(a * b); registrarOperacion("Multiplicacion", aleft, aright, expresion); :}
      | OPE:a DIVISION OPE:b {: String expresion = a + " / " + b; RESULT = (int)(a / b); registrarOperacion("Division", aleft, aright, expresion); :}
      | NUM:a                  {: RESULT = a; :}
      | DECIMAL:a              {: RESULT = (int)Math.round(a); :}
      | PAR1 OPE:a PAR2      {: RESULT = a; :};
